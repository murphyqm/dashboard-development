{
  "hash": "128eccb24832640e5c79e08b4489157e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 2. Plotting\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\n\n\nThere are multiple different Python plotting frameworks and associated dashboard libraries. One popular option is the Plotly plotting library, which integrates nicely with the Dash dashboard library.\n\nPlotly allows a range of interactive plots to be built in a relatively simple way. The examples below have some basic interactivity that can be rendered on a static page, but more in-depth interactivity (such as being able to filter the data and show the results) requires some compute power (and so needs to be run on a server).\n\n:::{.callout-note title=\"Static vs. server webapps\"}\n\nIn this setting, the word static is used to refer to a rendered html webpage that can be viewed and interacted with without a virtual machine running on a server. For example, this is a static webpage: you can download the html and view it, and it will look the same when just opened from a html file as it does here on the web. The graphics below have interactivity, but they are saved in a static html file; all interactivity has been precomputed and saved. Python code was used to build the figures below, but no Python code is running when you interact with them.\n\nIn contrast, interactive dashboards often are connected to a virtual machine with Python code running while you interact with them, serving up the results of filtering and computations. Again, the figures on these dashboards can be interactive like the ones below, or might be a series of non-interactive charts what simply update when you filter and select data.\n:::\n\nA good approach to building the overall resulting dashboard is to first plan exactly the content desired in a basic notebook:\n\n- What graphics reveal the insights you wish to showcase?\n- How will you communicate this data in an alternative accessible format (e.g. a sortable table)?\n- Is interactivity required to improve the understanding of your data?\n\nIf you envision your dashboard to contain multiple different linked graphics, it's a good idea to plot each of these individually in a notebook, with text describing how they would link together or how interactivity might work. This ensures that the message and analysis shines through, and that the design of the dashboard doesn't become a muddled prototype.\n\n\n## Interactive scatter plot\n\n::: {#545a0157 .cell execution_count=2}\n``` {.python .cell-code}\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')\ndf['text'] = df['airport'] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: ' + df['cnt'].astype(str)\n\n\nfig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = df['long'],\n        lat = df['lat'],\n        text = df['text'],\n        mode = 'markers',\n        marker = dict(\n            size = 8,\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'square',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Blues',\n            cmin = 0,\n            color = df['cnt'],\n            cmax = df['cnt'].max(),\n            colorbar=dict(\n                title=dict(\n                    text=\"Incoming flights<br>February 2011\"\n                )\n            )\n        )))\n\nfig.update_layout(\n        title = 'Most trafficked US airports<br>(Hover for airport names)',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.5,\n            subunitwidth = 0.5\n        ),\n    )\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_2.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n```\n:::\n:::\n\n\n## Interactions in static plots\n\n::: {#40eae7f5 .cell execution_count=3}\n``` {.python .cell-code}\n# Generate dataset\nimport numpy as np\nnp.random.seed(1)\n\nx0 = np.random.normal(2, 0.4, 400)\ny0 = np.random.normal(2, 0.4, 400)\nx1 = np.random.normal(3, 0.6, 600)\ny1 = np.random.normal(6, 0.4, 400)\nx2 = np.random.normal(4, 0.2, 200)\ny2 = np.random.normal(4, 0.4, 200)\n\n# Create figure\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(\n    go.Scatter(\n        x=x0,\n        y=y0,\n        mode=\"markers\",\n        marker=dict(color=\"DarkOrange\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x1,\n        y=y1,\n        mode=\"markers\",\n        marker=dict(color=\"Crimson\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x2,\n        y=y2,\n        mode=\"markers\",\n        marker=dict(color=\"RebeccaPurple\")\n    )\n)\n\n# Add buttons that add shapes\ncluster0 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x0), y0=min(y0),\n                            x1=max(x0), y1=max(y0),\n                            line=dict(color=\"DarkOrange\"))]\ncluster1 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x1), y0=min(y1),\n                            x1=max(x1), y1=max(y1),\n                            line=dict(color=\"Crimson\"))]\ncluster2 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x2), y0=min(y2),\n                            x1=max(x2), y1=max(y2),\n                            line=dict(color=\"RebeccaPurple\"))]\n\nfig.update_layout(\n    updatemenus=[\n        dict(buttons=list([\n            dict(label=\"None\",\n                 method=\"relayout\",\n                 args=[\"shapes\", []]),\n            dict(label=\"Cluster 0\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster0]),\n            dict(label=\"Cluster 1\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster1]),\n            dict(label=\"Cluster 2\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster2]),\n            dict(label=\"All\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster0 + cluster1 + cluster2])\n        ]),\n        )\n    ]\n)\n\n# Update remaining layout properties\nfig.update_layout(\n    title_text=\"Highlight Clusters\",\n    showlegend=False,\n)\n\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<iframe\n    scrolling=\"no\"\n    width=\"100%\"\n    height=\"545px\"\n    src=\"iframe_figures/figure_3.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n```\n:::\n:::\n\n\n## View options in static plots\n\n::: {#6660c709 .cell execution_count=4}\n``` {.python .cell-code}\n# load dataset\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv\")\n\n# Create figure\nfig = go.Figure()\n\n# Add surface trace\nfig.add_trace(go.Heatmap(z=df.values.tolist(), colorscale=\"Viridis\"))\n\n# Update plot sizing\nfig.update_layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=100, b=0, l=0, r=0),\n)\n\n# Update 3D scene options\nfig.update_scenes(\n    aspectratio=dict(x=1, y=1, z=0.7),\n    aspectmode=\"manual\"\n)\n\n# Add dropdowns\nbutton_layer_1_height = 1.08\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"colorscale\", \"Viridis\"],\n                    label=\"Viridis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Cividis\"],\n                    label=\"Cividis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Blues\"],\n                    label=\"Blues\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Greens\"],\n                    label=\"Greens\",\n                    method=\"restyle\"\n                ),\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"reversescale\", False],\n                    label=\"False\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"reversescale\", True],\n                    label=\"True\",\n                    method=\"restyle\"\n                )\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.37,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[{\"contours.showlines\": False, \"type\": \"contour\"}],\n                    label=\"Hide lines\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[{\"contours.showlines\": True, \"type\": \"contour\"}],\n                    label=\"Show lines\",\n                    method=\"restyle\"\n                ),\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.58,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\nfig.update_layout(\n    annotations=[\n        dict(text=\"colorscale\", x=0, xref=\"paper\", y=1.06, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n        dict(text=\"Reverse<br>Colorscale\", x=0.25, xref=\"paper\", y=1.07,\n                             yref=\"paper\", showarrow=False),\n        dict(text=\"Lines\", x=0.54, xref=\"paper\", y=1.06, yref=\"paper\",\n                             showarrow=False)\n    ])\n\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<iframe\n    scrolling=\"no\"\n    width=\"820px\"\n    height=\"920\"\n    src=\"iframe_figures/figure_4.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "part2-plotting_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}