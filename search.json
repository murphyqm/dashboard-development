[
  {
    "objectID": "part2-plotting.html",
    "href": "part2-plotting.html",
    "title": "2. Plotting",
    "section": "",
    "text": "There are multiple different Python plotting frameworks and associated dashboard libraries. One popular option is the Plotly plotting library, which integrates nicely with the Dash dashboard library.\nPlotly allows a range of interactive plots to be built in a relatively simple way. The examples below have some basic interactivity that can be rendered on a static page, but more in-depth interactivity (such as being able to filter the data and show the results) requires some compute power (and so needs to be run on a server).\nA good approach to building the overall resulting dashboard is to first plan exactly the content desired in a basic notebook:\nIf you envision your dashboard to contain multiple different linked graphics, it’s a good idea to plot each of these individually in a notebook, with text describing how they would link together or how interactivity might work. This ensures that the message and analysis shines through, and that the design of the dashboard doesn’t become a muddled prototype."
  },
  {
    "objectID": "part2-plotting.html#interactive-scatter-plot",
    "href": "part2-plotting.html#interactive-scatter-plot",
    "title": "2. Plotting",
    "section": "Interactive scatter plot",
    "text": "Interactive scatter plot\n\n\nCode\nimport plotly.graph_objects as go\nimport plotly.io as pio\npio.renderers.default = 'iframe'\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')\ndf['text'] = df['airport'] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: ' + df['cnt'].astype(str)\n\n\nfig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = df['long'],\n        lat = df['lat'],\n        text = df['text'],\n        mode = 'markers',\n        marker = dict(\n            size = 8,\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'square',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Blues',\n            cmin = 0,\n            color = df['cnt'],\n            cmax = df['cnt'].max(),\n            colorbar=dict(\n                title=dict(\n                    text=\"Incoming flights&lt;br&gt;February 2011\"\n                )\n            )\n        )))\n\nfig.update_layout(\n        title = 'Most trafficked US airports&lt;br&gt;(Hover for airport names)',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.5,\n            subunitwidth = 0.5\n        ),\n    )\nfig.show()\n\n\n\n\n\n\n\nCode\n# Generate dataset\nimport numpy as np\nnp.random.seed(1)\n\nx0 = np.random.normal(2, 0.4, 400)\ny0 = np.random.normal(2, 0.4, 400)\nx1 = np.random.normal(3, 0.6, 600)\ny1 = np.random.normal(6, 0.4, 400)\nx2 = np.random.normal(4, 0.2, 200)\ny2 = np.random.normal(4, 0.4, 200)\n\n# Create figure\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(\n    go.Scatter(\n        x=x0,\n        y=y0,\n        mode=\"markers\",\n        marker=dict(color=\"DarkOrange\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x1,\n        y=y1,\n        mode=\"markers\",\n        marker=dict(color=\"Crimson\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x2,\n        y=y2,\n        mode=\"markers\",\n        marker=dict(color=\"RebeccaPurple\")\n    )\n)\n\n# Add buttons that add shapes\ncluster0 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x0), y0=min(y0),\n                            x1=max(x0), y1=max(y0),\n                            line=dict(color=\"DarkOrange\"))]\ncluster1 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x1), y0=min(y1),\n                            x1=max(x1), y1=max(y1),\n                            line=dict(color=\"Crimson\"))]\ncluster2 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x2), y0=min(y2),\n                            x1=max(x2), y1=max(y2),\n                            line=dict(color=\"RebeccaPurple\"))]\n\nfig.update_layout(\n    updatemenus=[\n        dict(buttons=list([\n            dict(label=\"None\",\n                 method=\"relayout\",\n                 args=[\"shapes\", []]),\n            dict(label=\"Cluster 0\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster0]),\n            dict(label=\"Cluster 1\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster1]),\n            dict(label=\"Cluster 2\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster2]),\n            dict(label=\"All\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster0 + cluster1 + cluster2])\n        ]),\n        )\n    ]\n)\n\n# Update remaining layout properties\nfig.update_layout(\n    title_text=\"Highlight Clusters\",\n    showlegend=False,\n)\n\nfig.show()\n\n\n\n\n\n\n\nCode\n# load dataset\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv\")\n\n# Create figure\nfig = go.Figure()\n\n# Add surface trace\nfig.add_trace(go.Heatmap(z=df.values.tolist(), colorscale=\"Viridis\"))\n\n# Update plot sizing\nfig.update_layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=100, b=0, l=0, r=0),\n)\n\n# Update 3D scene options\nfig.update_scenes(\n    aspectratio=dict(x=1, y=1, z=0.7),\n    aspectmode=\"manual\"\n)\n\n# Add dropdowns\nbutton_layer_1_height = 1.08\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"colorscale\", \"Viridis\"],\n                    label=\"Viridis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Cividis\"],\n                    label=\"Cividis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Blues\"],\n                    label=\"Blues\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Greens\"],\n                    label=\"Greens\",\n                    method=\"restyle\"\n                ),\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"reversescale\", False],\n                    label=\"False\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"reversescale\", True],\n                    label=\"True\",\n                    method=\"restyle\"\n                )\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.37,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[{\"contours.showlines\": False, \"type\": \"contour\"}],\n                    label=\"Hide lines\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[{\"contours.showlines\": True, \"type\": \"contour\"}],\n                    label=\"Show lines\",\n                    method=\"restyle\"\n                ),\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.58,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\nfig.update_layout(\n    annotations=[\n        dict(text=\"colorscale\", x=0, xref=\"paper\", y=1.06, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n        dict(text=\"Reverse&lt;br&gt;Colorscale\", x=0.25, xref=\"paper\", y=1.07,\n                             yref=\"paper\", showarrow=False),\n        dict(text=\"Lines\", x=0.54, xref=\"paper\", y=1.06, yref=\"paper\",\n                             showarrow=False)\n    ])\n\nfig.show()"
  },
  {
    "objectID": "part3-dashboard.html",
    "href": "part3-dashboard.html",
    "title": "3. Dashboard",
    "section": "",
    "text": "Sometimes additional layers of control are required that are not possible through a purely static webpage and interactive map. Features such as:\nrequire a hosted dashboard with a server.\nA useful rule-of-thumb to decide on whether a fully-fledged dashboard is required is:"
  },
  {
    "objectID": "part3-dashboard.html#developing-the-dashboard-step-by-step",
    "href": "part3-dashboard.html#developing-the-dashboard-step-by-step",
    "title": "3. Dashboard",
    "section": "Developing the dashboard: step by step",
    "text": "Developing the dashboard: step by step\nIn the last section, we looked at building some graphics that are disconnected from each other, in a Jupyter notebook. In this section we will look in more detail at linking these plots and tying them together with reactive inputs/outputs: in other words, having them update when a user filters data.\n\n1. Setting up your Jupyter notebook\nDash apps can be built entirely within a single cell in a Jupyter notebook. Because apps require a server to run in the background, they cannot be rendered here in this static webpage."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dashboard Step by Step",
    "section": "",
    "text": "This document lays out some very basic steps to simplify the process of building a Python-based dashboard to present the results of a research project."
  },
  {
    "objectID": "part1-data.html",
    "href": "part1-data.html",
    "title": "1. Data",
    "section": "",
    "text": "All data analysis should be done in a dedicated version controlled repository.\nIt is oftentimes a good idea (if the data is open) to save this as a public repository, and in your visualisation/dashboard repository, simply point to the URL of this data.\nExploration and analysis of the data should be kept separate from the communication and visualisation of the data; this ensures your dashboard is useful and clear for the users.\n\n\n\n\n\n\nAction: save resulting data in a clean format\n\n\n\nYour cleaned and analysed datasets should be saved in a common data format (for example, geojson) in a repository that also tracks the cleaning and analysis steps (for example, in a git repository).\nThis dataset can have a DOI minted and citation metadata added.\nAny future updates or edits to the dataset will be obvious and visible, supporting open research and reproducibility."
  }
]