[
  {
    "objectID": "jupyter-notebooks/geospatial_in_dash_2.html",
    "href": "jupyter-notebooks/geospatial_in_dash_2.html",
    "title": "Setting up basic plots",
    "section": "",
    "text": "This shows how you can go from a dataframe to a plot, to an app.\nYou can open and run this entire notebook in Colab; this allows you to prototype and test code for use in a single-page Dash app without ever leaving your Colab/Jupyter notebook environment.\n  \n\n# !pip install dash\nfrom dash import Dash, html, dcc, callback, Output, Input\nimport plotly.express as px\nimport pandas as pd\nimport plotly.graph_objects as go\n\nquakes = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\nWe can check the content of the dataframe, and see what the titles of the columns are:\n\nquakes.columns\n\nWe can plot the data using the plotly library, using the Density map function:\n\nfig = go.Figure(go.Densitymap(lat=quakes.Latitude, lon=quakes.Longitude, z=quakes.Magnitude,\n                                 radius=10))\nfig.update_layout(map_style=\"open-street-map\", map_center_lon=180)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n\nLet’s also look at a scatter plot:\n\nfig = go.Figure(go.Scattermap(lat=quakes.Latitude, lon=quakes.Longitude, mode='markers',\n    text=quakes[\"Magnitude\"],\n    marker=dict(\n        size=10,\n        color=quakes.Magnitude, #set color equal to a variable\n        opacity=0.4,\n        colorscale='Viridis', # one of plotly colorscales\n        showscale=True\n    )))\nfig.update_layout(map_style=\"carto-positron\", map_center_lon=180)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n\nIf we want to add in selectors for the data, we need to convert it to an app:\n\n# What do we want to be able to select for:\n\nquakes.Magnitude.unique()\n\n\napp = Dash()\n\napp.layout = [\n    html.H1(children='Title of Dash App', style={'textAlign':'center'}),\n    dcc.RangeSlider(min=quakes.Magnitude.min(), max=quakes.Magnitude.max(), step=0.5, value=[quakes.Magnitude.min(), quakes.Magnitude.max()], id='magnitude-range'),\n    dcc.Graph(id='graph-content')\n]\n\n@callback(\n    Output('graph-content', 'figure'),\n    Input('magnitude-range', 'value')\n)\ndef update_graph(value):\n    df = quakes[(quakes.Magnitude&gt;=value[0]) & (quakes.Magnitude&lt;=value[1])]\n    fig = go.Figure(go.Scattermap(lat=df.Latitude, lon=df.Longitude, mode='markers',\n    text=df[\"Magnitude\"],\n    marker=dict(\n        size=10,\n        color=df.Magnitude, #set color equal to a variable\n        cmin=quakes.Magnitude.min(),\n        cmax=quakes.Magnitude.max(),\n        opacity=0.4,\n        colorscale='Viridis', # one of plotly colorscales\n        showscale=True\n    )))\n    fig.update_layout(map_style=\"carto-positron\", map_center_lon=180)\n    fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n    return fig\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "objectID": "part1-data.html",
    "href": "part1-data.html",
    "title": "1. Data",
    "section": "",
    "text": "All data analysis should be done in a dedicated version controlled repository.\nIt is oftentimes a good idea (if the data is open) to save this as a public repository, and in your visualisation/dashboard repository, simply point to the URL of this data.\nExploration and analysis of the data should be kept separate from the communication and visualisation of the data; this ensures your dashboard is useful and clear for the users.\n\n\n\n\n\n\nAction: save resulting data in a clean format\n\n\n\nYour cleaned and analysed datasets should be saved in a common data format (for example, geojson) in a repository that also tracks the cleaning and analysis steps (for example, in a git repository).\nThis dataset can have a DOI minted and citation metadata added.\nAny future updates or edits to the dataset will be obvious and visible, supporting open research and reproducibility."
  },
  {
    "objectID": "part2-plotting.html",
    "href": "part2-plotting.html",
    "title": "2. Plotting",
    "section": "",
    "text": "There are multiple different Python plotting frameworks and associated dashboard libraries. One popular option is the Plotly plotting library, which integrates nicely with the Dash dashboard library.\nPlotly allows a range of interactive plots to be built in a relatively simple way. The examples below have some basic interactivity that can be rendered on a static page, but more in-depth interactivity (such as being able to filter the data and show the results) requires some compute power (and so needs to be run on a server).\nA good approach to building the overall resulting dashboard is to first plan exactly the content desired in a basic notebook:\nIf you envision your dashboard to contain multiple different linked graphics, it’s a good idea to plot each of these individually in a notebook, with text describing how they would link together or how interactivity might work. This ensures that the message and analysis shines through, and that the design of the dashboard doesn’t become a muddled prototype."
  },
  {
    "objectID": "part2-plotting.html#interactive-scatter-plot",
    "href": "part2-plotting.html#interactive-scatter-plot",
    "title": "2. Plotting",
    "section": "Interactive scatter plot",
    "text": "Interactive scatter plot\n\n\nCode\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')\ndf['text'] = df['airport'] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: ' + df['cnt'].astype(str)\n\n\nfig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = df['long'],\n        lat = df['lat'],\n        text = df['text'],\n        mode = 'markers',\n        marker = dict(\n            size = 8,\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'square',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Blues',\n            cmin = 0,\n            color = df['cnt'],\n            cmax = df['cnt'].max(),\n            colorbar=dict(\n                title=dict(\n                    text=\"Incoming flights&lt;br&gt;February 2011\"\n                )\n            )\n        )))\n\nfig.update_layout(\n        title = 'Most trafficked US airports&lt;br&gt;(Hover for airport names)',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.5,\n            subunitwidth = 0.5\n        ),\n    )\nfig.show()"
  },
  {
    "objectID": "part2-plotting.html#interactions-in-static-plots",
    "href": "part2-plotting.html#interactions-in-static-plots",
    "title": "2. Plotting",
    "section": "Interactions in static plots",
    "text": "Interactions in static plots\n\n\nCode\n# Generate dataset\nimport numpy as np\nnp.random.seed(1)\n\nx0 = np.random.normal(2, 0.4, 400)\ny0 = np.random.normal(2, 0.4, 400)\nx1 = np.random.normal(3, 0.6, 600)\ny1 = np.random.normal(6, 0.4, 400)\nx2 = np.random.normal(4, 0.2, 200)\ny2 = np.random.normal(4, 0.4, 200)\n\n# Create figure\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(\n    go.Scatter(\n        x=x0,\n        y=y0,\n        mode=\"markers\",\n        marker=dict(color=\"DarkOrange\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x1,\n        y=y1,\n        mode=\"markers\",\n        marker=dict(color=\"Crimson\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x2,\n        y=y2,\n        mode=\"markers\",\n        marker=dict(color=\"RebeccaPurple\")\n    )\n)\n\n# Add buttons that add shapes\ncluster0 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x0), y0=min(y0),\n                            x1=max(x0), y1=max(y0),\n                            line=dict(color=\"DarkOrange\"))]\ncluster1 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x1), y0=min(y1),\n                            x1=max(x1), y1=max(y1),\n                            line=dict(color=\"Crimson\"))]\ncluster2 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x2), y0=min(y2),\n                            x1=max(x2), y1=max(y2),\n                            line=dict(color=\"RebeccaPurple\"))]\n\nfig.update_layout(\n    updatemenus=[\n        dict(buttons=list([\n            dict(label=\"None\",\n                 method=\"relayout\",\n                 args=[\"shapes\", []]),\n            dict(label=\"Cluster 0\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster0]),\n            dict(label=\"Cluster 1\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster1]),\n            dict(label=\"Cluster 2\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster2]),\n            dict(label=\"All\",\n                 method=\"relayout\",\n                 args=[\"shapes\", cluster0 + cluster1 + cluster2])\n        ]),\n        )\n    ]\n)\n\n# Update remaining layout properties\nfig.update_layout(\n    title_text=\"Highlight Clusters\",\n    showlegend=False,\n)\n\nfig.show()"
  },
  {
    "objectID": "part2-plotting.html#view-options-in-static-plots",
    "href": "part2-plotting.html#view-options-in-static-plots",
    "title": "2. Plotting",
    "section": "View options in static plots",
    "text": "View options in static plots\n\n\nCode\n# load dataset\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv\")\n\n# Create figure\nfig = go.Figure()\n\n# Add surface trace\nfig.add_trace(go.Heatmap(z=df.values.tolist(), colorscale=\"Viridis\"))\n\n# Update plot sizing\nfig.update_layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=100, b=0, l=0, r=0),\n)\n\n# Update 3D scene options\nfig.update_scenes(\n    aspectratio=dict(x=1, y=1, z=0.7),\n    aspectmode=\"manual\"\n)\n\n# Add dropdowns\nbutton_layer_1_height = 1.08\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"colorscale\", \"Viridis\"],\n                    label=\"Viridis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Cividis\"],\n                    label=\"Cividis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Blues\"],\n                    label=\"Blues\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Greens\"],\n                    label=\"Greens\",\n                    method=\"restyle\"\n                ),\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"reversescale\", False],\n                    label=\"False\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"reversescale\", True],\n                    label=\"True\",\n                    method=\"restyle\"\n                )\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.37,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[{\"contours.showlines\": False, \"type\": \"contour\"}],\n                    label=\"Hide lines\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[{\"contours.showlines\": True, \"type\": \"contour\"}],\n                    label=\"Show lines\",\n                    method=\"restyle\"\n                ),\n            ]),\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.58,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\nfig.update_layout(\n    annotations=[\n        dict(text=\"colorscale\", x=0, xref=\"paper\", y=1.06, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n        dict(text=\"Reverse&lt;br&gt;Colorscale\", x=0.25, xref=\"paper\", y=1.07,\n                             yref=\"paper\", showarrow=False),\n        dict(text=\"Lines\", x=0.54, xref=\"paper\", y=1.06, yref=\"paper\",\n                             showarrow=False)\n    ])\n\nfig.show()"
  },
  {
    "objectID": "part3-dashboard.html",
    "href": "part3-dashboard.html",
    "title": "3. Dashboard",
    "section": "",
    "text": "Sometimes additional layers of control are required that are not possible through a purely static webpage and interactive map. Features such as:\nrequire a hosted dashboard with a server.\nA useful rule-of-thumb to decide on whether a fully-fledged dashboard is required is:"
  },
  {
    "objectID": "part3-dashboard.html#developing-the-dashboard-step-by-step",
    "href": "part3-dashboard.html#developing-the-dashboard-step-by-step",
    "title": "3. Dashboard",
    "section": "Developing the dashboard: step by step",
    "text": "Developing the dashboard: step by step\nIn the last section, we looked at building some graphics that are disconnected from each other, in a Jupyter notebook. In this section we will look in more detail at linking these plots and tying them together with reactive inputs/outputs: in other words, having them update when a user filters data.\n\n1. Setting up your Jupyter notebook\nDash apps can be built entirely within a single cell in a Jupyter notebook. Because apps require a server to run in the background, they cannot be rendered here in this static webpage, however, you can launch the notebook in Google Colab using the button below:\n  \nKeep reading for some details on how to set this up locally vs. on Colab.\n\nInstalling Dash\nIn order to run a Dash app from a notebook cell, you need to have Dash installed in your environment. If you’re running the notebook locally, this just means you need to ensure the Dash library is in your environment. When running on Colab, Dash isn’t automatically available, so you need to use pip to install it:\n1!pip install dash\n2from dash import Dash, html, dcc, callback, Output, Input\n\n1\n\nOnly use this line if running from Colab. The ! essentially tells the Colab notebook you want to talk to the terminal of the underlying Linux machine, and do pip install dash. If you are running this locally, just ensure that Dash is in your Python environment.\n\n2\n\nThen, you have to import all the relevant modules from Dash. If you are running this locally, start with this line.\n\n\n\n\nImport other libraries\n\n\nCode\n1import plotly.express as px\nimport pandas as pd\nimport plotly.graph_objects as go\n\n2quakes = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\n\n\n1\n\nI’ve imported these other modules to allow me to import the data and plot it to make sure I know what I’m doing before I put it in an app.\n\n2\n\nThis is an example dataset that I’m using.\n\n\n\n\nNow that our notebook is set up with the modules and data we need, let’s get on to prototyping the contents of the dashboard.\n\n\n\n2. Check the data, and plot the different features you want in the app\nOften it’s a good idea to plot the various different data graphics you want to include in your dashboard individually. First, I’m going to double check that the data is what I expect.\nWhat column headers are in the dataset?\n\n\nCode\nquakes.columns\n\n\nIndex(['Date', 'Latitude', 'Longitude', 'Magnitude'], dtype='object')\n\n\nHow big is the dataframe?\n\n\nCode\nquakes.shape\n\n\n(23412, 4)\n\n\n\nCreate some individual plots\nLet’s say that in our app, we want to show the recorded earthquakes as a scatterplot, with the magnitude shown in the colour of the point and additionally as a hover tooltip. Let’s get that up and working in Plotly first, before trying to put it in an app!\n\n\nCode\nfig = go.Figure(go.Scattermap(lat=quakes.Latitude, lon=quakes.Longitude, mode='markers',\n    text=quakes[\"Magnitude\"],\n    marker=dict(\n        size=10,\n        color=quakes.Magnitude, #set color equal to a variable\n        opacity=0.4,\n        colorscale='Viridis', # one of plotly colorscales\n        showscale=True\n    )))\nfig.update_layout(map_style=\"carto-positron\", map_center_lon=180)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n\n\n\n\n\nOk, that’s looking how we want it to (there’s some more thought needed here if you’re displaying points like this, that are dense and overlapping, but that’s a separate discussion).\n\n\n\n3. Turn the plot into an app!\nOk, so now that we have created the plot we want, let’s turn it into a very very simple app. Again, this won’t be able to run here, so you’ll have to launch the notebook in Colab (see the link at the top) to view.\nEven though it can’t run here, I’ve added the code for the app here and annotated it; hopefully this will be helpful in working out how to build your own.\n\n\n\n\n\n\nNote\n\n\n\nOne key thing here is that the entire app needs to sit inside a single cell/code-block in your notebook - while dataframes can be loaded outside this cell, all @callback instances must be in the same cell. Also, only have one cell in your notebook with a Dash app inside it; the notebook shares port forwarding and it will get annoyed at you and tell you to close it down. If this happens, delete all but one of your app cells, and restart the Kernel - essentially, turn it off and on again!\n\n\nNote: use the copy clipboard icon in the top right corner to copy without interference from annotation notes.\n1app = Dash()\n\n2app.layout = [\n    html.H1(children='Title of Dash App', style={'textAlign':'center'}),\n    dcc.RangeSlider(min=quakes.Magnitude.min(),\n                    max=quakes.Magnitude.max(),\n                    step=0.5,\n                    value=[quakes.Magnitude.min(), quakes.Magnitude.max()],\n                    id='magnitude-range'),\n    dcc.Graph(id='graph-content')\n]\n\n3@callback(\n    Output('graph-content', 'figure'),\n    Input('magnitude-range', 'value')\n)\n4def update_graph(value):\n5    df = quakes[(quakes.Magnitude&gt;=value[0]) & (quakes.Magnitude&lt;=value[1])]\n    fig = go.Figure(\n6        go.Scattermap(lat=df.Latitude, lon=df.Longitude, mode='markers',\n        text=df[\"Magnitude\"],\n        marker=dict(\n            size=10,\n            color=df.Magnitude, #set color equal to a variable\n7            cmin=quakes.Magnitude.min(),\n            cmax=quakes.Magnitude.max(),\n            opacity=0.4,\n            colorscale='Viridis', # one of plotly colorscales\n            showscale=True\n        )))\n    fig.update_layout(map_style=\"carto-positron\", map_center_lon=180)\n    fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n8    return fig\n\n9if __name__ == '__main__':\n    app.run(debug=True)\n\n1\n\nThis creates the app “object”, which is essentially a box that contains everything we need, including any text shown, interactive toggles, and our plots.\n\n2\n\nThis very simply, in order, tells us what our app will show. First, there will be a big html header that’s centre-aligned; on the next line we will have a “range slider”, which is an input widget provided by Dash that lets you select a range of numbers, and the output of these numbers has an “id label” that we’ve set to \"magnitude-range\"; on the next line we will have a graph of some kind, this graph has an “id label” that we’ve set to \"graph-content\".\n\n3\n\nThis “callback” decorator is what makes this an app in comparison to the static plots on the previous page. This basically tells us that we have two linked pieces: when the object labeled \"magnitude-range\" changes, we use the \"value\" (the output numbers from the range slider) to rerun the function attached to \"graph-content\", which will plot a new figure.\n\n4\n\nIn order to make our plot reactive, that is in order to make it respond to the change in the range slider, we need to put it inside a function. You’ll see that the figure plotting script inside this function is very similar to the one we already made above for our static plot, with a few key differences.\n\n5\n\nHere’s one key difference: previously, we just plotted the whole quakes dataframe. In this line, we’re saying that we just want a bit that’s in between the two values output by the range slider, and we want to save that reduced chunk with the name df.\n\n6\n\nThis is then our next change - we search and replace quakes with df so that our plot just uses the new, smaller, reactive subset.\n\n7\n\nThis is another change - we want the colour range to use the original max and min of the full dataframe, not the new reduced subsection, so we need to set maximum and minimum values.\n\n8\n\nInstead of using fig.show(), we return the figure object because we’ve already essentially run show() at the beginning with dcc.Graph(id='graph-content').\n\n9\n\nThis bit essentially tells the notebook/the script (if it’s being run outside of a notebook) that if the entire script is run, we intend to run the app function. In this case, because we’re building the app, we’ve put it in debug mode, which means it will show us detailed error messages if something goes wrong - something we’ll probably want to switch off before sharing so our users don’t get confusing and complex Python errors thrown at them.\n\n\n\n\n4. Test out the functionality\nThis can be a useful playground for figuring out how to set up the app, as Jupyter notebook does all the work of setting up a server in the background.\nWhen you’re ready to run the app, you only need to save the content of this cell into a Python file along with the imports and data loading, and run it with a Python server, something we’ll deal with in the next section.\nYou can check it runs by closing down your other notebooks, creating a new notebook (on Colab or locally), and copying and pasting the entire app into a single cell and making sure it runs. Test it with this snippet:\n\n\napp_name.py\n\n0!pip install dash\n1from dash import Dash, html, dcc, callback, Output, Input\nimport pandas as pd\nimport plotly.graph_objects as go\n\n2quakes = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\napp = Dash()\n\napp.layout = [\n    html.H1(children='Title of Dash App', style={'textAlign':'center'}),\n    dcc.RangeSlider(min=quakes.Magnitude.min(),\n                    max=quakes.Magnitude.max(),\n                    step=0.5,\n                    value=[quakes.Magnitude.min(), quakes.Magnitude.max()],\n                    id='magnitude-range'),\n    dcc.Graph(id='graph-content')\n]\n\n@callback(  \n    Output('graph-content', 'figure'),\n    Input('magnitude-range', 'value')\n)\ndef update_graph(value): \n    df = quakes[(quakes.Magnitude&gt;=value[0]) & (quakes.Magnitude&lt;=value[1])] \n    fig = go.Figure(\n        go.Scattermap(lat=df.Latitude, lon=df.Longitude, mode='markers', \n        text=df[\"Magnitude\"],\n        marker=dict(\n            size=10,\n            color=df.Magnitude,\n            cmin=quakes.Magnitude.min(),\n            cmax=quakes.Magnitude.max(), \n            opacity=0.4,\n            colorscale='Viridis',\n            showscale=True\n        )))\n    fig.update_layout(map_style=\"carto-positron\", map_center_lon=180)\n    fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n    return fig\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n\n0\n\nRemove this line when saving out as a Python file!\n\n1\n\nYou need to add an import statement before you save this as a standalone .py file!\n\n2\n\nYou also need to load in your data."
  },
  {
    "objectID": "jupyter-notebooks/geospatial_in_dash.html",
    "href": "jupyter-notebooks/geospatial_in_dash.html",
    "title": "Setting up basic plots",
    "section": "",
    "text": "This shows how you can go from a dataframe to a plot, to an app.\nYou can open and run this entire notebook in Colab; this allows you to prototype and test code for use in a single-page Dash app without ever leaving your Colab/Jupyter notebook environment.\n  \n\n!pip install dash\nfrom dash import Dash, html, dcc, callback, Output, Input\nimport plotly.express as px\nimport pandas as pd\nimport plotly.graph_objects as go\n\nquakes = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\n/bin/bash: line 1: pip: command not found\n\n\nWe can check the content of the dataframe, and see what the titles of the columns are:\n\nquakes.columns\n\nIndex(['Date', 'Latitude', 'Longitude', 'Magnitude'], dtype='object')\n\n\nWe can plot the data using the plotly library, using the Density map function:\n\nfig = go.Figure(go.Densitymap(lat=quakes.Latitude, lon=quakes.Longitude, z=quakes.Magnitude,\n                                 radius=10))\nfig.update_layout(map_style=\"open-street-map\", map_center_lon=180)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n\n                            \n                                            \n\n\nIf we want to add in selectors for the data, we need to convert it to an app:\n\n# What do we want to be able to select for:\n\nquakes.Magnitude.unique()\n\narray([6.  , 5.8 , 6.2 , 6.7 , 5.9 , 8.2 , 5.5 , 5.6 , 6.1 , 8.7 , 5.7 ,\n       7.3 , 6.5 , 6.4 , 6.3 , 7.  , 7.4 , 7.6 , 6.8 , 7.7 , 7.2 , 7.8 ,\n       6.9 , 6.6 , 7.5 , 7.1 , 6.35, 8.1 , 5.62, 5.63, 7.9 , 5.52, 5.82,\n       5.54, 8.  , 5.64, 5.55, 5.67, 5.84, 5.81, 6.47, 6.31, 5.75, 5.66,\n       5.51, 6.45, 6.57, 5.77, 5.53, 5.69, 5.89, 5.58, 8.3 , 5.94, 8.4 ,\n       6.48, 5.97, 9.1 , 8.6 , 5.88, 8.8 , 5.72, 6.02, 5.73])\n\n\n\napp = Dash()\n\napp.layout = [\n    html.H1(children='Title of Dash App', style={'textAlign':'center'}),\n    dcc.Dropdown(quakes.Magnitude.unique(), 5.5, id='dropdown-selection'),\n    dcc.Graph(id='graph-content')\n]\n\n@callback(\n    Output('graph-content', 'figure'),\n    Input('dropdown-selection', 'value')\n)\ndef update_graph(value):\n    df = quakes[quakes.Magnitude==value]\n    fig = go.Figure(go.Densitymap(lat=df.Latitude, lon=df.Longitude, z=df.Magnitude,\n                                 radius=10))\n    fig.update_layout(map_style=\"open-street-map\", map_center_lon=180)\n    fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n    fig.update_traces(showscale=False)\n    return fig\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dashboard Step by Step",
    "section": "",
    "text": "This document lays out some very basic steps to simplify the process of building a Python-based dashboard to present the results of a research project."
  }
]